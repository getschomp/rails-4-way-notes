The Rails 4 Way - Notes

1 - Rails enviroment and configuration

  this chapter will cover:
    bundler
    boot.rb and application.rb(startup and request handeling)
    the three enviroments that come standard(development, production, test)
    creating your oen enviroment
  thats it!

  Bundler
    Gets Gems, handels dependencies, resolves complex dependencies for you

  Gemfile
    specifies dependencies, if there is no version it just gets the latest version from rubygems.

    pseudocode -- gem '(gem_name)', '(version_#)'
    pseudocode -- group :(enviroment_name) do
                    gem '(gem_name)'
                  end

  Load Gems from git
    pseudocode -- gem '(gem_name)', git:'(git_repo_address)'

  Load Gems from your Local Machine
    pseudocode -- gem '(gem_name)', path:'~/(local_directory_with_gem)'

  Packaging Gems

    Why would you package?  to avoid external dependencies(if you don't want to rely on rubygems or an online gem repo)
    to package:
      bundle package
      bundle install --local

  Startup & App Settings

    config/boot.rb
      sets up bundler and loads paths
    config/application.rb
      rails gems for ENV, configures
    config/enviroment.rb
      runs initializers

  config/application.rb
    Rails app settings
    changes to this file require a server restart to take effect
    by default the file has:
      require "rails/all"
    but you can delete that if you only want to enable certain parts of the rails default configuations(railties), for example:
      require "active_record/railtie"

  Time Zones(application.rb)
    you can set the time zone:
      config.time_zone = 'Central Time (US & Canada)'
      config.time_zone = 'Eastern Time (US & Canada)'
      run 'rake time:zones:all' at cl for a list of zones

  Localization
    set up the locale to change the language

  Generator Default Settings
    here you can set up what you get when you run 'rails g ...' commands
    some gems do this for you

  Initializers(config/initializers)

    Backtrace Silencers (smaller error messages)
      you can specifiy how far back you want the backtrace to go when an error message with a long backtrace is thrown

    Filter Parameter Logging (private parts of logs)
      you can keep certain parameters out of your logs so if hackers find your logs they can't abuse this information.
      for example: you might want to filter credit card info
      Rails.application.config.filter_parameters += [:credit_card_number]

!!  Inflections
      a class named inflector transforms strings from singular to plural
      class names to table names ect.
      Use the console to figure out how infletor reacts to a word
      $ rails console
      >> ActiveSupport::Inflector.pluralize "virus"
      => "viri" # wierdly enough this default is incorrect
      >> "pensum".pluralize
      => "pensums"
      configure new pluralizations in  config/initializers/inflections.rb

    Custom MIME Types
      add types to mime_types.rb
      for example by default .txt is supported but .rft is not

    Session Store
      session_- store.rb - thats where you can config cookie/session
      run rake secret to generate a new secret key

    Wrap Parameters
      sets it up so javascrip MVC frameworks like backbone, ember or angular play nice with rails
      when the json goes through a controller it "wraps" it
      or sets it up so that it looks like it came to the controller from a form_for helper

  Additional Configuration

    Load Path Modifications
      you can make your app load files from directories other than the default

    Log-Level Override
      configure how much information the log file will give you in the various enviroments
      available log levels are: :debug, :info, :warn, :error, :fatal, and :unknown these also correspond with the numbers 0 to 5

    Schema Dumper
       "revert to the older style of dumping the schema using SQL, if youâ€™re doing things that are incompatible with the schema dumper code"

    Console
     you can configure what methods are run in the console when you run rails c
     for instance you can configure the console to use pry instead of irb

    Spring
      speeds dev by "eliminating the need to boot up Rails every time you execute tests, or run a rake task."

  Development Mode

    Automatic Class Reloading
      config.cache_classes = false # this makes sure rails gets all code changes each time you reload in development

    The Rails Class Loader
      in rails the name of files tells what class module is within them
      rails has a load path
      run $LOAD_PATH in the console to see the load path

    Rails, Modules, and Auto-Loading Code
      Rails is able to automatically require the right files based on file names
      if you follow rails naming conventions there is typically no need to require anything

    Eager Load
      config.eager_load = false # boosts loading speed in dev

    Error Reports
      config.consider_all_requests_local = true # gives developer freindly error messages in the browser even when on a remote machine

    Caching
      caching = bad in development
      unless you are testing caching
      if you are testing caching change this line as so:
      config.action_controller.perform_caching = true

    Raise Delivery Errors
      # Don't care if the mailer can't send.
      config.action_mailer.raise_delivery_errors = false
      change that line if you are debugging or teting mailing in production
      you can see the delivery in the log

    Deprecation Notices
      set how you recive depreciation notices
      throught the rails logger

    Pending Migrations Error Page
      gives you an error in the browser if you didn't migrate
      as it sounds, by default on page load

    Assets Debug Mode
     # Debug mode disables concatenation and preprocessing of assets.
      config.assets.debug = true

  Test Mode
    default setup
      RAILS_ENV = test
      eager load false
      disable caching
      the test enviroment sends emails to an array called ActionMailer::Base.deliveries
      mostly you will never need to edit the test config

  Custom Enviroments
    might be configured for a QA deployment to diagnose production problems

  Production Mode

    General
      faster because it does reload everything at ever request
      #File:config/environments/production.rb
      cache = true
      eager_load = true #proformance boost in production
      compress assets

    Assets
      assets are by default precompiled by the Asset Pipeline
      To enable live asset compilation fallback on production, set config.assets.compile to true.

  Configuring a Database
    don't store database.yml on github
    or use an enviroment variable like DATABASE_URL

  Configuring Application Secrets
    use an enviroment variable like ENV['SECRET_KEY_BASE']

  Logging
    a message to the log using the logger

    Rails Log Files
      rails logs can become huge
      clear the logs using 'rake log:clear'
      it can be useful to have a terminal window open and tracking the log at all times during development.
      to do that run:
      tail -f log/development.log
      most useful log outputs :
      the hash of parmeters associated with the request
      controllers and actions invoced as well as SQL statements
      how fast the processes completed

    Tagged Logging
      prepend a tag to a log file with information making it easier to track down what you are looking for
      config.log_tags to [:subdomain]
      the log might then say [some_subdomain] Started GET "/articles" for 127.0.0.1 at 2013-02-01 11:49:09 -0500

    Log File Analysis
      proformance
        not always that accurate but still pretty useful for comparison sake
      SQL queries
        is active record doing what i want?
        am i calling an N+1 select over and over
        A lot of times all it takes is proper use of the includes method on a particular query to alleviate the problem.

          this code:
            clients = Client.limit(10)

            clients.each do |client|
              puts client.address.postcode
            end

          could be:
            clients = Client.includes(:address).limit(10)

            clients.each do |client|
              puts client.address.postcode
            end

         The controller should call the data from the model and pass into the view
         never call active record database methods directly from the view?
         "There are cases (such as usage of fragment caching) where it makes sense to have database operations happening during view rendering."

      Rails::Subscriber.colorize_logging
        tell rails weather or not to color the log outputs





